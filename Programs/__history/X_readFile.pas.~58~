
unit X_readFile;
//XMLNode has Childnodes , and you can use Node.Childnodes[0] or Node.ChildNodes['Hdr] to get child node
//XMLNodeList is the list itself. it has attribute list.count and list['arrive'] to get the node
// childnodes will create a node if NOT found . FindNode will result to null and chekc assign
//if Assigned(list['data'])
interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.DateUtils,System.Variants, System.Classes, System.ioUtils,Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Xml.xmldom, Xml.XMLIntf,
  Xml.XMLDoc, Data.DB, MemDS, DBAccess, IBC,Math, RzButton, RzPanel,
  Vcl.ExtCtrls, Vcl.Mask, RzEdit, vcl.Wwdbedit, RzLabel, RzShellDialogs,CodeSiteLogging;

type
TMawbRec =Record
  mawbSerial:integer;
  MawbId:String;
  EquipmentId:String;
  ArrivalDate:TDate;
  FileName:String;
End;
THawbRec =Record
  HawbId:String;
  HawbSerial:Integer;
  MawbSerial:Integer;
  MawbId:String;
  ArrivalDate:String;
End;
THawbAge=(haNotFound, haSame, haPartial, haOld, haDuplicate);

  TX_readFileFRM = class(TForm)
    XMLDocument1: TXMLDocument;
    ReadTrans: TIBCTransaction;
    WriteTrans: TIBCTransaction;
    HawbSQL: TIBCQuery;
    MawbSQL: TIBCQuery;
    SenderInvoiceSQL: TIBCQuery;
    SenderInvoiceSQLFK_HAWB_SERIAL: TIntegerField;
    SenderInvoiceSQLINVOICE_SERIAL: TIntegerField;
    SenderInvoiceSQLINVOICE_NUMBER: TStringField;
    SenderInvoiceSQLFK_HAWB_ID: TStringField;
    SenderInvoiceSQLINVOICE_AMOUNT: TFloatField;
    SenderInvoiceSQLFREIGHT_AMOUNT: TFloatField;
    SenderInvoiceSQLDISCOUNT_AMOUNT: TFloatField;
    SenderInvoiceSQLINSURANCE_AMOUNT: TFloatField;
    SenderInvoiceSQLOTHER_CHARGES_AMOUNT: TFloatField;
    SenderInvoiceSQLTOTAL_AMOUNT: TFloatField;
    SenderInvoiceSQLCURRENCY: TStringField;
    SenderInvoiceSQLEXCHANGE_RATE: TFloatField;
    SenderInvoiceSQLFACTOR: TFloatField;
    SenderInvoiceSQLFREIGHT_CYP_AMOUNT: TFloatField;
    SenderInvoiceSQLCUSTOMS_VALUE: TFloatField;
    SenderInvoiceSQLFK_MAWB_SERIAL: TIntegerField;
    SenderInvoiceSQLIS_VALID: TStringField;
    SenderInvoiceSQLNUMBER_OF_HAWB_ITEMS: TIntegerField;
    SenderInvoiceSQLPRE_DISCOUNT_AMOUNT: TFloatField;
    SenderInvoiceSQLDISCOUNT_RATE: TFloatField;
    SenderInvoiceSQLFACTOR_NUMERIC: TFloatField;
    HawbItemSQL: TIBCQuery;
    HawbItemSQLSERIAL_NUMBER: TIntegerField;
    HawbItemSQLFK_HAWB_SERIAL: TIntegerField;
    HawbItemSQLFK_COUNTRY_ORIGIN: TIntegerField;
    HawbItemSQLDESCRIPTION: TStringField;
    HawbItemSQLFK_RELIEF_CODE: TStringField;
    HawbItemSQLFK_IMPORT_TYPE: TStringField;
    HawbItemSQLINVOICE_VALUE: TFloatField;
    HawbItemSQLDUTY_TYPE: TStringField;
    HawbItemSQLTARIFF_DESCRIPTION: TStringField;
    HawbItemSQLNET_QUANTITY: TIntegerField;
    HawbItemSQLIMPORT_DUTY_RATE: TFloatField;
    HawbItemSQLRELIEVED_IMPORT_DUTY: TFloatField;
    HawbItemSQLEXCISE_DUTY_RATE: TFloatField;
    HawbItemSQLEXCISE_RELIEVED: TFloatField;
    HawbItemSQLTRL_RATE: TFloatField;
    HawbItemSQLTRL_RELEIVED: TFloatField;
    HawbItemSQLVAT_RATE: TFloatField;
    HawbItemSQLVAT_RELEIVED: TFloatField;
    HawbItemSQLCUSTOMS_VALUE: TFloatField;
    HawbItemSQLCURRENCY_RATE: TFloatField;
    HawbItemSQLCURRENCY: TStringField;
    HawbItemSQLFK_MAWB: TIntegerField;
    HawbItemSQLFK_VAT_CODE: TIntegerField;
    HawbItemSQLFK_TARIFF_C_CODE: TStringField;
    HawbItemSQLFK_TARIFF_CODE: TStringField;
    HawbItemSQLIMPORT_DUTY_RATE_UNIT: TStringField;
    HawbItemSQLIMPORT_DUTY_RATE_QUANT: TFloatField;
    HawbItemSQLIMPORT_DUTY_RATE_BASE: TFloatField;
    HawbItemSQLDUTY_IMPORT_PAY: TFloatField;
    HawbItemSQLDUTY_TRL_PAY: TFloatField;
    HawbItemSQLDUTY_EXCISE_PAY: TFloatField;
    HawbItemSQLDUTY_VAT_PAY: TFloatField;
    HawbItemSQLDUTY_IMPORT_TOTAL: TFloatField;
    HawbItemSQLDUTY_EXCISE_TOTAL: TFloatField;
    HawbItemSQLDUTY_TRL_TOTAL: TFloatField;
    HawbItemSQLDUTY_VAT_TOTAL: TFloatField;
    HawbItemSQLTOTAL_VALUE_FOR_VAT: TFloatField;
    HawbItemSQLDUTY_TOTAL_CHARGES: TFloatField;
    HawbItemSQLFK_EXCISE_CODE: TStringField;
    HawbItemSQLEURO1: TStringField;
    HawbItemSQLEURO2: TStringField;
    HawbItemSQLPOSOSTOSIS: TStringField;
    HawbItemSQLFK_SENDER_INVOICE_SERIAL: TIntegerField;
    HawbItemSQLMULTI_ITEMS_INVOICE: TStringField;
    HawbItemSQLINVOICE_LINE: TIntegerField;
    HawbItemSQLPRE_DISCOUNT_AMOUNT: TFloatField;
    HawbItemSQLWEIGHT_NET: TFloatField;
    HawbItemSQLUNIT: TStringField;
    HawbItemSQLEURO_PENDING: TStringField;
    MawbSQLREFERENCE_NUMBER: TIntegerField;
    MawbSQLMAWB_ID: TStringField;
    MawbSQLDATE_ARRIVED: TDateField;
    MawbSQLFK_COUNTRY_CONSIGNEE: TIntegerField;
    MawbSQLREFERENCE_YEAR: TSmallintField;
    MawbSQLFK_PORT_IMPORTATION: TIntegerField;
    MawbSQLSIGNATORY_NAME: TStringField;
    MawbSQLFORM_DATE: TDateField;
    MawbSQLFLIGHT_NUMBER: TStringField;
    MawbSQLPASSED: TStringField;
    MawbSQLROTATION_NUMBER: TIntegerField;
    MawbSQLROTATION_YEAR: TSmallintField;
    MawbSQLFK_PORT_CLEARING: TIntegerField;
    MawbSQLGOODS_NUMBER: TIntegerField;
    MawbSQLGOODS_DESCRIPTION: TStringField;
    MawbSQLCBOOK_NUMBER: TStringField;
    MawbSQLINVOICED: TStringField;
    MawbSQLSENT_TO_HEAD: TStringField;
    MawbSQLCUSTOMS_OVERTIME_HOURS: TFloatField;
    MawbSQLCUSTOMS_OVERTIME_RATE: TFloatField;
    MawbSQLSTORAGE_EXPENSES: TFloatField;
    MawbSQLDELIVERY_EXPENSES: TFloatField;
    MawbSQLAMOUNT_NOT_INVOICED: TFloatField;
    MawbSQLAMOUNT_INVOICED: TFloatField;
    MawbSQLDATE_PASSED: TDateField;
    MawbSQLGOODS_WEIGHT: TIntegerField;
    MawbSQLHAWBS_CLEARED_FIRST_TIME: TIntegerField;
    MawbSQLHAWBS_IN_MAWB: TIntegerField;
    MawbSQLDOCS_NUMBER: TIntegerField;
    MawbSQLDOCS_WEIGHT: TFloatField;
    MawbSQLHIGH_VALUE_NUMBER: TIntegerField;
    MawbSQLHIGH_VALUE_WEIGHT: TFloatField;
    MawbSQLMEDIUM_VALUE_NUMBER: TIntegerField;
    MawbSQLMEDIUM_VALUE_WEIGHT: TFloatField;
    MawbSQLLOW_VALUE_NUMBER: TIntegerField;
    MawbSQLLOW_VALUE_WEIGHT: TFloatField;
    MawbSQLCUSTOMS_OVERTIME_RATE_TYPE: TStringField;
    MawbSQLXML_CONSOLIDATED_ID: TStringField;
    MawbSQLROTATION_2: TStringField;
    MawbSQLHMSD: TStringField;
    MawbSQLLOW_VALUE_TDID: TStringField;
    MawbSQLSTATUSC_NUMBER: TIntegerField;
    MawbSQLSTATUSC_WEIGHT: TIntegerField;
    MawbSQLTDID_NEW: TStringField;
    MawbSQLF63: TStringField;
    MawbSQLSTATUSC: TStringField;
    MawbSQLTDID_MEDIUM: TStringField;
    Panel1: TRzPanel;
    Label1: TLabel;
    RzPanel2: TRzPanel;
    RzBitBtn2: TRzBitBtn;
    Panel2: TRzPanel;
    RzPanel1: TRzPanel;
    RzBitBtn1: TRzBitBtn;
    Button1: TButton;
    Button2: TButton;
    OpenDialog1: TOpenDialog;
    MawbSQLDHL_EQUIPMENT_ID: TStringField;
    ValueFLD: TwwDBEdit;
    MawbSQLFILE_NAME_XML: TStringField;
    ProcessFLD: TRzLabel;
    OpenfileDLG: TRzOpenDialog;
    All: TButton;
    MawbSQLMSG_TIME: TDateTimeField;
    MawbSQLMOVEMENT_NUMBER: TStringField;
    MawbSQLDATE_DEPART: TDateField;
    MessagesMemo: TRzMemo;
    HawbSQLSERIAL_NUMBER: TIntegerField;
    HawbSQLSEQUENCE_NUMBER: TIntegerField;
    HawbSQLHAWB_ID: TStringField;
    HawbSQLSHIPMENT_ORIGIN_AREA: TStringField;
    HawbSQLSHIPMENT_ORIGIN_COUNTRY: TStringField;
    HawbSQLPIECES: TIntegerField;
    HawbSQLWEIGHT: TFloatField;
    HawbSQLDESCRIPTION: TStringField;
    HawbSQLFK_DOCUMENT_MASTER_SERIAL: TIntegerField;
    HawbSQLFK_MOVEMENT_SERIAL: TIntegerField;
    HawbSQLPIECES_S: TStringField;
    HawbSQLSENDER_NAME: TStringField;
    HawbSQLSENDER_ADDRESS: TStringField;
    HawbSQLSENDER_POST_CODE: TStringField;
    HawbSQLSENDER_CITY: TStringField;
    HawbSQLSENDER_COUNTRY_CODE: TStringField;
    HawbSQLCONSIGNEE_NAME: TStringField;
    HawbSQLCONSIGNEE_ADDRESS: TStringField;
    HawbSQLCONSIGNEE_POST_CODE: TStringField;
    HawbSQLCONSIGNEE_CITY: TStringField;
    HawbSQLCONSIGNEE_COUNTRY_CODE: TStringField;
    HawbSQLFK_ITINERARY_SERIAL: TIntegerField;
    HawbSQLPACKAGES_COUNT: TIntegerField;
    HawbSQLITEMS_COUNT: TIntegerField;
    HawbSQLPAYMENT_METHOD: TStringField;
    HawbSQLIS_HIGH: TStringField;
    HawbSQLVALUE_TYPE: TStringField;
    HawbSQLCUSTOMS_VALUE: TFloatField;
    HawbSQLCURRENCY: TStringField;
    HawbSQLCURRENCY_RATE: TFloatField;
    HawbSQLSENDER_ADDRESS_1: TStringField;
    HawbSQLSENDER_ADDRESS_2: TStringField;
    HawbSQLSENDER_ADDRESS_3: TStringField;
    HawbSQLSENDER_DEVICE_TYPE: TStringField;
    HawbSQLSENDER_DEVICE_DETAILS: TStringField;
    HawbSQLCONSIGNEE_ADDRESS_1: TStringField;
    HawbSQLCONSIGNEE_ADDRESS_2: TStringField;
    HawbSQLCONSIGNEE_ADDRESS_3: TStringField;
    HawbSQLCONSIGNEE_DEVICE_TYPE: TStringField;
    HawbSQLCONSIGNEE_DEVICE_DETAILS: TStringField;
    HawbSQLINCOTERMS: TStringField;
    HawbSQLIS_SCANNED: TStringField;
    HawbSQLSENDER_EMAIL: TStringField;
    HawbSQLCONSIGNEE_EMAIL: TStringField;
    HawbSQLSERVICE_CODE: TStringField;
    HawbSQLACCOUNT_NUMBER: TStringField;
    HawbSQLCONSIGNEE_PREFERRED_NAME: TStringField;
    HawbSQLSENDER_PREFERRED_NAME: TStringField;
    procedure FormCreate(Sender: TObject);
    procedure RzBitBtn2Click(Sender: TObject);
    procedure RzBitBtn1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure FormActivate(Sender: TObject);
  private
    { Private declarations }
    cn:TIBCConnection;
//    DefaultDeliveryTerm:String;
//    DefaultUnit:String;

  Function GetTheFile:String;


  function ReadTheFile(Const FileName:String) :boolean;
  function ReadOneXML(Const FileName:String) :Boolean;

  function ProcessOneMawb(headerNode:IXMLNode; mawbNode:IXMLNode;fileName:String):Integer;
  function CreateMawb(Const MawbId:String;Const HeaderNode:IXMLNode;Const MawbNode:IXMLNode;Const fileName:string):integer;
  function CreateHawb(Const mawbSerial:Integer; hawbNode:IXMLNode):Integer;
  function CreateHawbItem(Const hawbSerial:Integer ; hawbItemNode:IXMLNode):Integer;

  procedure DeleteHawb(hawbSerial:Integer);
// Function GetDefaultMediumVatRate():Double;
  Function ConvertCategory(const Category:string):string;


  public
    { Public declarations }
  end;

var
  X_readFileFRM: TX_readFileFRM;

implementation

{$R *.dfm}

uses  G_kyriacosTypes,  G_KyrSQL, G_generalProcs, G_DebugUnit, MainForm,
  GeneralParametersNew;



procedure TX_readFileFRM.FormActivate(Sender: TObject);
begin
ProcessFLD.Visible:=false;

end;

procedure TX_readFileFRM.FormCreate(Sender: TObject);
begin
  cn:= MainFormFRM.CabOutData;
end;



function TX_readFileFRM.ReadTheFile(Const FileName:String) :Boolean;
var
  Doc: IXMLDocument;
  Data: IXMLNode;
  Movements, Mawbs,Hawbs :IXMLNodeList;
  aHeader,aMovement,aMawb,aHawb:ixmlnODE;
  I: Integer;
//  j:Integer;
  MawbRec:TmawbRec;
  str:String;
  temptime:TDateTime;
  TotalHawbs:Integer;

begin
  TotalHawbs:=0;
  result:=true;
  Doc := LoadXMLDocument(FileName);
  Data := Doc.DocumentElement;

  Movements:=Data.ChildNodes['Dtls'].ChildNodes['Entries'].ChildNodes['Entry'].childNOdes['Mvmts'].ChildNodes;
  aHeader:=Data.ChildNodes['Hdr'];


  if Movements.Count <1 then begin
    result:=False;
    exit;
  end;
// ShowMessage(Movements[0].ChildNodes['MvmtNo'].Text);

  Mawbs:=Movements[0].ChildNodes['TDOCs'].ChildNodes; //only one movement is sent
  aMovement:=Movements[0];
  if Mawbs.Count <1 then begin
    result:=False;
    exit;
  end;

  //same first mawb exists in another file
  aMawb := Mawbs[0];

  for I := 0 to Mawbs.Count-1 do  begin
    aMawb := Mawbs[i];
    TotalHawbs := TotalHawbs + ProcessOneMawb(aHeader,aMawb,fileName);
  end;

  MessagesMemo.Lines.Add('---------------------------------------------------------');
  MessagesMemo.Lines.Add('--------------------- Total Created:'+InttoStr(Totalhawbs));


  end;




procedure TX_readFileFRM.RzBitBtn1Click(Sender: TObject);
begin
  close;
end;

procedure TX_readFileFRM.RzBitBtn2Click(Sender: TObject);
var
  FileName:String;
  FileNameXyz:String;
  MoveFolder:String;
  MoveFile:String;
  temp:string;
  strings:TstringList;
begin

//  fileName:='C:\Data\DelphiProjects\Tariffs\XMLFiles1\t1.Xml';
  ProcessFLD.Visible:=true;
  MessagesMemo.Clear;
  FileName:=GetTheFile();
  if FileName='' then begin
      exit;
  end;

  temp:=UpperCase(Tpath.GetExtension(filename));
  If UpperCase(temp)='.XYZ' then begin
      showmessage('cannot read file with EXTENSION XYZ');
      exit;
  end;

   MoveFOlder := GN_GetTheSystemParameter(cn, 'F_1').P_String5;
   If not System.SysUtils.DirectoryExists(MoveFolder) then begin
    MessageDlg('Destination Directory Does NOT exist:'+#13+#10+ MOveFolder, mtError, [mbOK], 0);
    exit;
   end;

  MessagesMemo.lines.Add('Processing File:    '+FileName);
  FileNameXyz:=Tpath.ChangeExtension(FileName,'.xyz');

  try
  //Convert to utf to strip control chars
    temp:=trim(system.IOutils.Tfile.ReadAllText(filename));
    strings:=TStringList.Create();
    strings.Add(temp);
    strings.SaveToFile(FileNameXyz,TEncoding.UTF8);
  finally
    strings.Free;
   end;

  Tfile.Delete(fileName);
  ReadOneXML(FileNameXyz);


 temp:=Tpath.ChangeExtension(FileNameXYZ,'.XXX');
  If RenameFile(FileNameXYZ,temp ) then begin
      MoveFIle:=MoveFolder +'\'+System.SysUtils.ExtractFileName(temp);
      TRY
        Tfile.Move(temp,MoveFile);
      FINALLY
       self.ModalResult:=mrNone;
      END;
  end;

  MessagesMemo.lines.Add('----------------------------------------------------');
//  MessagesMemo.lines.Add('Finish:    '+FileName);
  self.ModalResult:=mrNone;
  ProcessFLD.Visible:=false;

end;


function TX_readFileFRM.ReadOneXML(Const FileName:String) :Boolean;
var
  Doc: IXMLDocument;
  Data: IXMLNode;
  Movements, Mawbs,Hawbs :IXMLNodeList;
  aHeader,aMovement,aMawb,aHawb:ixmlnODE;
  I: Integer;
  MawbRec:TmawbRec;
  str:String;
  temptime:TDateTime;
  TotalHawbs:Integer;

begin
  TotalHawbs:=0;
  result:=true;
  Doc := LoadXMLDocument(FileName);
  Data := Doc.DocumentElement;

  Movements:=Data.ChildNodes['Dtls'].ChildNodes['Entries'].ChildNodes['Entry'].childNOdes['Mvmts'].ChildNodes;
  aHeader:=Data.ChildNodes['Hdr'];


  if Movements.Count <1 then begin
    result:=False;
    exit;
  end;
// ShowMessage(Movements[0].ChildNodes['MvmtNo'].Text);

  Mawbs:=Movements[0].ChildNodes['TDOCs'].ChildNodes; //only one movement is sent
  aMovement:=Movements[0];
  if Mawbs.Count <1 then begin
    result:=False;
    exit;
  end;

  //same first mawb exists in another file
  aMawb := Mawbs[0];

  for I := 0 to min(Mawbs.Count-1,1 )do  begin
  //each movement may hawe one or more mawbs  (each mawb is a TDOC) but may have more than one same mawb
    aMawb := Mawbs[i];
    TotalHawbs := TotalHawbs + ProcessOneMawb(aHeader,aMawb,fileName);
  end;

  MessagesMemo.Lines.Add('---------------------------------------------------------');
  MessagesMemo.Lines.Add('--------------------- Total Created:'+InttoStr(Totalhawbs));


  end;



function TX_readFileFRM.ProcessOneMawb(headerNode:IXMLNode;MawbNode:IXMLNode;FileName:string):Integer;
var
  MawbId:String;
  hawbNodes :IXMLNodeList;
  hawbNode:ixmlnODE;
  hawbItemNodes:IxmlNodeList;
  hawbItemNode:IxmlNode;
  j,k:Integer;
  MawbSerial:Integer;
  Hawbserial:integer;
  hawb:string;
  isNewMawb:Boolean;
  HawbAge:THawbAge;
//  OldmawbRec:TmawbRec;
  newEqId:String;
  CountNew,CountSame,CountPartial:integer;
  MawbMessage:String;
  ClearingInstruction:String;
  ArrivalDate:TDate;
  DepartureDate:TDate;
  OldMawbSerial:Integer;
  TraderId:Integer;

begin
  CountNew:=0;
//  CountSame:=0;
//  CountPartial:=0;

  MawbId:=MawbNode.ChildNodes['TDOCNo'].Text;
  ArrivalDate   :=ConvertDateF(MawbNode.ParentNode.ParentNode.ChildNodes['ArrivalDate'].Text);
  DepartureDate :=ConvertDateF(MawbNode.ParentNode.ParentNode.ChildNodes['DepartureDate'].Text);


  hawbNOdes:=MawbNOde.ChildNodes['Shps'].ChildNodes;

//  for j:= 0 to hawbNodes.Count -1 do begin
  for j:= 0 to min(hawbNodes.Count -1,2) do begin
      hawbNode:=hawbNodes[j];
      hawb:=hawbNode.ChildNodes['HAWB'].Text;

      hawbAge:=haOld;
      case hawbAge of
        haNotFound,haOld: begin
            inc(countNew);
            HawbSerial := CreateHawb(MawbSerial,hawbNode);
            hawbItemNodes:=hawbNode.ChildNodes['LineItems'].ChildNodes;
            for k:= 0 to hawbItemNodes.Count -1 do begin
              hawbItemNode:= hawbItemNodes[k];
              CreateHawbItem(Hawbserial,HawbItemNode);
            end;
        end;
        haSame: begin
            inc(countSame);
//            HawbSerial := UpdateHawb(HawbSerial,HawbNode);
            continue;
        end;
        haPartial: begin
            inc(countPartial);
//            CreatePartialHawb(hawb,Mawbserial,hawbNode);
        end;
      end;


  end;

//  if IsNewMawb then
//    MawbMessage:='New Mawb Created:'
//  else
//    MawbMessage:='EXISTING Mawb UPDATED:';

  MessagesMemo.Lines.Add(MawbMessage+MawbId);
  MessagesMemo.Lines.Add('------Hawbs Created:'+IntToStr(CountNew));
  result:=CountNew;
end;



function TX_readFileFRM.CreateMawb(Const MawbId:String;Const HeaderNode:IXMLNode;Const MawbNode:IXMLNode;Const FileName:String):integer;
var
  ArrivalDate:TDate;
  DepartureDate:TDate;
//  ArrivalDate2:TDate;
  temp:String;
  Movement:String;
  str:string;
  MsgTime:TDateTime;
begin

  if MawbSQL.Active then
    MawbSQL.close;




  MawbSql.Open;
  MawbSQl.Edit;
  MawbSQL.FieldByName('Mawb_id').Value:=MawbId;
  mawbSQL.FieldByName('FILE_NAME_XML').value := TPath.GetFileName(FileName);

  if Trim(MawbNode.ParentNode.ParentNode.ChildNodes['ArrivalDate'].Text) ='' then begin
    ArrivalDate:=now;
  end else begin
    ArrivalDate:=ConvertDateF(MawbNode.ParentNode.ParentNode.ChildNodes['ArrivalDate'].Text);
  end;
  mawbSQL.FieldByName('date_arrived').value  :=arrivalDate;

  DepartureDate:=ConvertDateF(MawbNode.ParentNode.ParentNode.ChildNodes['DepartureDate'].Text);
  mawbSQL.FieldByName('date_depart').value  :=DepartureDate;


  temp:= mawbNode.ParentNode.ParentNode.ChildNodes['DepartureDate'].Text;
  mawbSQL.FieldByName('FORM_DATE').value  := ConvertDateF(temp);

  temp:= mawbNode.ParentNode.ParentNode.ChildNodes['MvmtNo'].Text;
  mawbSQL.FieldByName('FLIGHT_NUMBER').value  := temp;

  MawbSQL.FieldByName('REFERENCE_YEAR').Value:=yearOf(arrivalDate);
  MawbSQL.FieldByName('Passed').Value:='N';
  MawbSQL.FieldByName('DHL_EQUIPMENT_ID').Value:=mawbNode.ChildNodes['EquipmentID'].Text;

   Movement:=MawbNode.ParentNode.ParentNode.ChildNodes['MvmtNo'].Text;
   MawbSQL.FieldByName('MOVEMENT_NUMBER').Value:=Movement;

  Str:= HeaderNode.ChildNodes['MsgCtl'].ChildNodes['MsgDate'].Text
  +' '+ HeaderNode.ChildNodes['MsgCtl'].ChildNodes['MsgTime'].Text;
  MsgTime:=ConvertUTCTimeStampF(str);
  MawbSQL.FieldByName('MSG_TIME').AsDateTime:=MsgTime;



  MawbSQL.Post;
  result:=MawbSQL.FieldByName('Reference_number').AsInteger;

  MawbSQL.Close;
end;



   procedure TX_readFileFRM.Button2Click(Sender: TObject);
begin
  DeleteHawb(StrToIntDef(ValueFLD.Text,0));
end;

function TX_readFileFRM.CreateHawb(Const mawbSerial:Integer; hawbNode:IXMLNode):Integer;
var
HawbSerial:Integer;
  qr:TIBCQuery;
  siSQL:TIBCQuery;
  temp:string;
  senderNode:IXMLNode;
  CustomerNode:IXMLNode;
  ClearingInstruction:String;
  Currency:String;
  TraderId:String;
  hawbId:String;
  Category:String;
  isError:boolean;
begin


    HawbId:= hawbNode.ChildNodes['HAWB'].Text;
    senderNode:=hawbNode.ChildNodes['ShpCnsgnr'].ChildNodes['CnsgnrCoDtls'];
    CustomerNode:=hawbNode.ChildNodes['ShpCnsgne'].ChildNodes['CnsgneCoDtls'];
//      codesite.Send('HawbID'+HawbId);

    qr:=TksQuery.Create(cn,'Select * from airwaybill where serial_number= -1');
    try
    qr.Open;
    qr.Insert;
    isError:=false;

     HawbSerial:= G_KyrSQL.ksGenerateSerial(cn,'AIRWAYBILL_GENERATOR');
     qr.FieldByName('serial_number').Value:=HawbSerial;

     qr.FieldByName('Hawb_id').Value:= hawbNode.ChildNodes['HAWB'].Text;
     qr.FieldByName('weight').Value:= G_generalProcs.ConvertDecimalF(hawbNode.ChildNodes['GrossWgt'].Text);
     qr.FieldByName('SHIPMENT_ORIGIN_AREA').Value:= hawbNode.ChildNodes['ShpOrgn'].Text;
     qr.FieldByName('SHIPMENT_ORIGIN_COUNTRY').Value:= hawbNode.ChildNodes['ShpCtryOrgn'].Text;


     qr.FieldByName('DESCRIPTION').Value:= hawbNode.ChildNodes['CargoDesc'].Text;

     qr.FieldByName('CUSTOMS_VALUE').Value:= ConvertDecimalF( hawbNode.ChildNodes['CstmsVal'].Text);
     qr.FieldByName('CURRENCY').Value:= hawbNode.ChildNodes['CstmsValCrncyCd'].Text;


     qr.FieldByName('INCOTERMS').Value:= hawbNode.ChildNodes['Incoterms'].Text;
     qr.FieldByName('SERVICE_CODE').Value:= hawbNode.ChildNodes['DHLServiceCd'].Text;

     qr.FieldByName('PIECES').Value:= hawbNode.ChildNodes['SDPieces'].Text;

     category:=hawbNode.ChildNodes['Category'].Text;
     qr.FieldByName('VALUE_TYPE').Value:= ConvertCategory(Category);

     qr.FieldByName('ACCOUNT_NUMBER').Value:= hawbNode.ChildNodes['DHLAcctNo'].Text;
     qr.FieldByName('PAYMENT_METHOD').Value:= hawbNode.ChildNodes['X_PaymentMethod'].Text;

     qr.FieldByName('Sender_name').Value:=senderNode.ChildNodes['CoName'].Text;
     qr.FieldByName('SENDER_ADDRESS_1').Value:=senderNode.ChildNodes['AddrEng'].ChildNodes['AddrLn1'].Text;
     qr.FieldByName('SENDER_ADDRESS_2').Value:=senderNode.ChildNodes['AddrEng'].ChildNodes['AddrLn2'].Text;
     qr.FieldByName('SENDER_ADDRESS_2').Value:=senderNode.ChildNodes['AddrEng'].ChildNodes['AddrLn2'].Text;
     qr.FieldByName('SENDER_ADDRESS_3').Value:=senderNode.ChildNodes['AddrEng'].ChildNodes['AddrLn3'].Text;
     qr.FieldByName('SENDER_POST_CODE').Value:=senderNode.ChildNodes['AddrEng'].ChildNodes['PostalCd'].Text;
     qr.FieldByName('SENDER_CITY').Value:=senderNode.ChildNodes['AddrEng'].ChildNodes['City'].Text;
     qr.FieldByName('SENDER_COUNTRY_CODE').Value:=senderNode.ChildNodes['AddrEng'].ChildNodes['CtryCd'].Text;

     qr.FieldByName('SENDER_DEVICE_TYPE').Value:=senderNode.ChildNodes['AddrEng'].ChildNodes['DeviceType'].Text;
     qr.FieldByName('SENDER_DEVICE_DETAILS').Value:=senderNode.ChildNodes['AddrEng'].ChildNodes['DeviceDtls'].Text;
     qr.FieldByName('SENDER_PREFERRED_NAME').Value:=senderNode.ChildNodes['AddrEng'].ChildNodes['PreferredName'].Text;

     qr.FieldByName('CONSIGNEE_NAME').Value:=CustomerNode.ChildNodes['CoName'].Text;
     qr.FieldByName('CONSIGNEE_ADDRESS_1').Value:=CustomerNode.ChildNodes['AddrEng'].ChildNodes['AddrLn1'].Text;
     qr.FieldByName('CONSIGNEE_ADDRESS_2').Value:=CustomerNode.ChildNodes['AddrEng'].ChildNodes['AddrLn2'].Text;
     qr.FieldByName('CONSIGNEE_ADDRESS_3').Value:=CustomerNode.ChildNodes['AddrEng'].ChildNodes['AddrLn3'].Text;
     qr.FieldByName('CONSIGNEE_POST_CODE').Value:=CustomerNode.ChildNodes['AddrEng'].ChildNodes['PostalCd'].Text;
     qr.FieldByName('CONSIGNEE_CITY').Value:=CustomerNode.ChildNodes['AddrEng'].ChildNodes['City'].Text;
     qr.FieldByName('CONSIGNEE_COUNTRY_CODE').Value:=CustomerNode.ChildNodes['AddrEng'].ChildNodes['CtryCd'].Text;


     qr.FieldByName('CONSIGNEE_DEVICE_TYPE').Value:=CustomerNode.ChildNodes['AddrEng'].ChildNodes['DeviceType'].Text;
     qr.FieldByName('CONSIGNEE_DEVICE_TYPE').Value:=CustomerNode.ChildNodes['AddrEng'].ChildNodes['DeviceDtls'].Text;
     qr.FieldByName('CONSIGNEE_PREFERRED_NAME').Value:=CustomerNode.ChildNodes['AddrEng'].ChildNodes['PreferredName'].Text;
     qr.Post;
     result:=HawbSerial;

    finally
     qr.Free;
//      G_DebugUnit.GD_ShowDataRecord(qr);
    end;


end;

function TX_readFileFRM.CreateHawbItem(Const hawbSerial:Integer ; hawbItemNode:IXMLNode):Integer;
var
  OldMawbId:String;
  HawbNode:IXMLNode;
  Count:Integer;
  Weight:Double;
  qr:TksQuery;

begin
//        ItemTable.AddNode('GoodsItemNo','HawbItemSQL','SEQUENCE',false);
//        ItemTable.AddNode('DescOfGoods','HawbItemSQL','DESCRIPTION',false);
//        ItemTable.AddNode('InvLineVal','HawbItemSQL','AMOUNT',false);
//        ItemTable.AddNode('InvCrncyCd','HawbItemSQL','CURRENCY',false);
//        ItemTable.AddNode('MeasureUnitQualifier','HawbItemSQL','UNIT_OF_MEASURE',false);

  qr:=TksQuery.Create(cn,'Select * from airwaybill_item where serial_number= -1');

  try
    qr.Open;
    qr.Insert;
    qr.FieldByName('serial_number').Value:= G_KyrSQL.ksGenerateSerial(cn,'ITEM_GENERATOR');
    qr.FieldByName('FK_AIRWAYBILL_SERIAL').Value       := HawbSerial;

    qr.FieldByName('SEQUENCE').value  := strToIntDef( hawbItemNode.ChildNodes['GoodsItemNo'].Text,0);
    qr.FieldByName('DESCRIPTION').value     :=  hawbItemNode.ChildNodes['DescOfGoods'].Text;
    qr.FieldByName('AMOUNT').value          :=  ConvertDecimalF(hawbItemNode.ChildNodes['InvLineVal'].Text);
    qr.FieldByName('CURRENCY').value        :=  hawbItemNode.ChildNodes['InvCrncyCd'].Text;
    qr.FieldByName('UNIT_OF_MEASURE').value :=   hawbItemNode.ChildNodes['MeasureUnitQualifier'].Text;

    qr.FieldByName('WEIGHT').value        :=  1;
    qr.FieldByName('pieceS').value :=1;


//    Count:=HawbNode.ChildNodes['LineItems'].ChildNodes.Count;
    qr.Post;

  finally
//      G_DebugUnit.GD_ShowDataRecord(HawbItemSQL);
//      ShowMessage('HawbItem error: hawb-serial= '+IntToStr(hawbSerial));
    qr.free;
  end;

end;


Function TX_readFileFRM.GetTheFile:String;
Var
//        Success:integer;
        DefaultDir:String;
        ParamRec:TParameterRecord;
Begin
        DefaultDir:= GN_GetTheSystemParameter(cn, 'F_1').P_String4;
        If DefaultDir='' then begin
          MessageDlg('Menu ->System->Params-> System Parameters. Then Add record with Code=F1 ', mtWarning, [mbOK], 0);
        end;

        OpenFileDLG.InitialDir:=Defaultdir;
        OpenFIleDLG.Filter:='No Extention|*.;XML|*.XML';

        with OpenfileDLG do begin
                if Execute then begin
                        Result:= Filename;
                end else begin
                        Result:='';
                end; //execute
        end;{with}
End;

procedure TX_readFileFRM.DeleteHawb(hawbSerial:Integer);
var
  multiSQL:TksMultiSQL;
  hiStr:String;
  HawbStr:string;
begin
  HawbStr:=IntToStr(HawbSerial);
   try
    hiStr:= 'Delete  from hawb_item_certificate dd where dd.fk_hawb_item in '
    + '( select hi.serial_number from  hawb_item hi where hi.fk_hawb_serial = :hawb )';

    multiSQL:=TksMultiSQL.Create(cn)
    .add(hiStr,[HawbStr])
    .add('delete from hawb_comments where fk_hawb_serial = :hawb',[HawbStr] )
    .add('delete from hawb_partial where FK_HAWB_SERIAL_ORIGINAL = :hawb',[HawbStr] )
    .add('delete from hawb_item where fk_hawb_serial =:hawb',[HawbStr] )
    .add('delete from sender_invoice where fk_hawb_serial = :hawb' ,[HawbStr])
    .add('delete from hawb where serial_number = :hawb',[HawbStr])
    .ExecSQL();

   finally
     multiSQL.Free;
   end;

end;


Function TX_readFileFRM.ConvertCategory(const Category:string):string;
Begin
//        HawbTable.FindNode('Category',TagRecord);
//        aString:=Trim(TagRecord.FIeldValue);

        If (Trim(Category)='1')or (Trim(Category)='2')or(Trim(Category)='3') then begin
                Result:='L';
        end else If (Trim(Category)='4') then begin
                Result:='M';
        end else If (Trim(Category)='5')or (Trim(Category)='6')or(Trim(Category)='7') then begin
                Result:='H';
        end else begin
                Result:='';
        end;
//        HawbTable.UpdateValue('X_Category',ValueType);
End;

END.





