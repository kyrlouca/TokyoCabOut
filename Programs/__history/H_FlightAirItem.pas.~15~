unit H_FlightAirItem;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,
  StdCtrls, Mask, DBCtrls, Db, wwSpeedButton, wwDBNavigator,
  wwclearpanel, Buttons, ExtCtrls, wwdblook, Wwkeycb, Grids,
  DBAccess, IBC, MemDS, Wwdbigrd, Wwdbgrid, wwdbedit, vcl.Wwdotdot, vcl.Wwdbcomb,
  G_KyrSQL,G_kyriacosTypes, RzButton, RzPanel, RzLabel, RzDBLbl, vcl.Wwdbdatetimepicker,
  vcl.wwcheckbox;
type
  TH_FlightAirItemFRM = class(TForm)
    Panel1: TPanel;
    Panel4: TPanel;
    Panel2: TPanel;
    Panel3: TPanel;
    TableSRC: TDataSource;
    WriteTrans: TIBCTransaction;
    ReadTrans: TIBCTransaction;
    Label4: TLabel;
    RzPanel1: TRzPanel;
    RzBitBtn1: TRzBitBtn;
    BitBtn1: TBitBtn;
    CanelBTN: TBitBtn;
    RzPanel2: TRzPanel;
    RzPanel3: TRzPanel;
    TableSQL: TIBCQuery;
    RzPanel5: TRzPanel;
    GroupBox1: TGroupBox;
    Label2: TLabel;
    Label3: TLabel;
    asf: TLabel;
    SerialFLD: TRzDBLabel;
    Label14: TLabel;
    Label15: TLabel;
    FirstFLD: TwwDBEdit;
    wwDBEdit1: TwwDBEdit;
    wwDBEdit2: TwwDBEdit;
    wwDBEdit12: TwwDBEdit;
    Label16: TLabel;
    wwDBEdit13: TwwDBEdit;
    Panel6: TRzPanel;
    TableSQLSERIAL_NUMBER: TIntegerField;
    TableSQLSEQUENCE: TIntegerField;
    TableSQLWEIGHT: TFloatField;
    TableSQLPIECES: TIntegerField;
    TableSQLDESCRIPTION: TStringField;
    TableSQLTARIFF_CODE: TStringField;
    TableSQLAMOUNT: TFloatField;
    TableSQLCURRENCY_RATE: TFloatField;
    TableSQLCURRENCY: TStringField;
    TableSQLFK_FA_SERIAL: TIntegerField;
    GroupCertificateSQL: TIBCQuery;
    GroupCertificateSQLCODE: TStringField;
    GroupCertificateSQLDESCRIPTION: TStringField;
    GroupCertificateSRC: TIBCDataSource;
    SelectCertSQL: TIBCQuery;
    SelectCertSQLCERT_CODE: TStringField;
    SelectCertSQLDESCRIPTION: TStringField;
    SelectCertSQLSERIAL_NUMBER: TIntegerField;
    SelectCertSQLFK_CERTIFICATE_GROUP: TStringField;
    SelectCertSQLCERT_TYPE: TStringField;
    SelectCertSQLCERT_VALUE: TStringField;
    SelectCertSQLFIELD_FOR_VALUE: TStringField;
    SelectCertSQLTABLE_FOR_VALUE: TStringField;
    CertItemSRC: TIBCDataSource;
    CertItemSQL: TIBCQuery;
    CertItemSQLCERT_CODE: TStringField;
    CertItemSQLCERT_VALUE: TStringField;
    CertItemSQLDESCRIPTION: TStringField;
    CertItemSQLCERT_TYPE: TStringField;
    CertItemSQLSERIAL_NUMBER: TIntegerField;
    CertItemSQLFK_FLIGHT_AIRWAYBILL_ITEM: TIntegerField;
    CertItemSQLFIELD_FOR_VALUE: TStringField;
    CertItemSQLTABLE_FOR_VALUE: TStringField;
    GroupBox2: TGroupBox;
    wwDBNavigator1: TwwDBNavigator;
    wwNavButton1: TwwNavButton;
    wwNavButton2: TwwNavButton;
    wwNavButton3: TwwNavButton;
    wwNavButton4: TwwNavButton;
    wwNavButton5: TwwNavButton;
    wwNavButton6: TwwNavButton;
    wwNavButton7: TwwNavButton;
    wwDBGrid1: TwwDBGrid;
//    wwDBComboBox1: TwwDBComboBox;
    Select2: TwwDBLookupCombo;
    SelGroupFLD: TwwDBLookupCombo;
    Label1: TLabel;
    wwDBEdit3: TwwDBEdit;
    Label5: TLabel;
    wwDBEdit4: TwwDBEdit;
    procedure BitBtn2Click(Sender: TObject);
    procedure TableSQLBeforeEdit(DataSet: TDataSet);
    procedure FormActivate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure CanelBTNClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure RzBitBtn1Click(Sender: TObject);
    procedure Nav1InsertClick(Sender: TObject);
    procedure TableSQLNewRecord(DataSet: TDataSet);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure SelGroupFLDCloseUp(Sender: TObject; LookupTable,
      FillTable: TDataSet; modified: Boolean);
  private
    { Private declarations }
    cn:TIBCConnection;
  public
    { Public declarations }

    IN_ACTION:String;
    in_SERIAL:Integer;

  end;

var
  H_FlightAirItemFRM: TH_FlightAirItemFRM;

implementation

uses    G_generalProcs, MainForm;


{$R *.DFM}

procedure TH_FlightAirItemFRM.BitBtn2Click(Sender: TObject);
begin
if TableSQL.State in [dsEdit,dsInsert] then
  TableSQL.Post;
close;
end;

procedure TH_FlightAirItemFRM.TableSQLBeforeEdit(
  DataSet: TDataSet);
begin
//   Dataset.FieldByName('Serial_number').ReadOnly:=true;
end;


procedure TH_FlightAirItemFRM.TableSQLNewRecord(DataSet: TDataSet);
begin
//  Dataset.FieldByName('status_active').Value:='Y';
//  Dataset.FieldByName('CERTIFIED_ANAD').Value:='N';
end;


procedure TH_FlightAirItemFRM.RzBitBtn1Click(Sender: TObject);
begin
close;
end;

procedure TH_FlightAirItemFRM.SelGroupFLDCloseUp(Sender: TObject; LookupTable,
  FillTable: TDataSet; modified: Boolean);
Var
  GroupCode:String;
  FaItem:Integer;
  faCertSerial:Integer;
  certItemSerial:Integer;
  str:String;
  qr:TksQuery;

begin
  GroupCode:=LookupTable.FieldByName('Code').AsString;
  FaItem:=TableSQL.FieldByName('serial_Number').AsInteger;




  showMessage(intToStr(faItem));
  Str:='delete from flight_airwaybill_item_cert fi where fi.fk_flight_airwaybill_item = :fa_item';
  ksExecSQLVar(cn, str,[FaItem]);

  str:=
  '   insert into flight_airwaybill_item_cert'
  +'      (serial_number, FK_FLIGHT_AIRWAYBILL_ITEM, cert_code, cert_type, description, cert_value, table_for_value, field_for_value)'
  +'    select'
  +'    :ItemCertSerial, :ItemCert_fk , ci.cert_code, ci.cert_type, ci.description, ci.cert_value, ci.table_for_value, ci.field_for_value'
  +'    from certificate_item ci where ci.serial_number = :CertSerial';

  try
    //read all the certificate_items for the group  which will apply for the flight_airwaybill_item
    qr:=TksQuery.Create(cn,'select serial_number from certificate_item where fk_certificate_group= :group');
    qr.ParamByName('group').Value:=GroupCode;
    qr.Open;
    while (not qr.Eof) do begin
      FaCertSerial:= ksGenerateSerial(cn,'FLIGHT_AIRWAYBILL_ITEM_CERT_GEN');
      CertItemSerial:=qr.FieldByName('serial_number').AsInteger;
      ksExecSQLVar(cn, str,[FaCertSerial,faItem,CertItemSerial]);
      qr.Next;
    end;
  finally
    qr.Free;
  end;
  CertItemSQL.Refresh;

end;

procedure TH_FlightAirItemFRM.FormActivate(Sender: TObject);
begin
ksOpenTables([GroupCertificateSQL,SelectCertSQL,CertItemSQL]);
if IN_ACTION='INSERT' then begin
//   ksOpenTables([TableSQL]);
   TableSQL.Close;
   TableSQL.RestoreSQL;
   tABLESQL.AddWhere('serial_Number = -1');
   TableSQL.ReadOnly:=false;
   TableSQL.Open;

   TableSQL.Insert;
   TableSQL.FieldByName('fk_FA_serial').Value:=in_SERIAL;

end else if IN_ACTION='EDIT' then begin
   TableSQL.Close;
   TableSQL.RestoreSQL;
   tABLESQL.AddWhere('serial_Number = :serialNumber');
   TableSQL.ParamByName('SerialNumber').Value:=in_SERIAL;
   TableSQL.ReadOnly:=false;
   TableSQL.Open;
end else if IN_ACTION='DISPLAY' then begin
   TableSQL.Close;
   TableSQL.RestoreSQL;
   tABLESQL.AddWhere('serial_Number = :serialNumber');
   TableSQL.ReadOnly:=true;
   TableSQL.Open;
end else begin
   TableSQL.Close;
   TableSQL.RestoreSQL;
   TableSQL.ReadOnly:=False;
   TableSQL.Open;
end;

end;

procedure TH_FlightAirItemFRM.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
if TableSQL.State in [dsInsert, dsEdit] then
   TableSQL.Post;
end;

procedure TH_FlightAirItemFRM.FormCloseQuery(Sender: TObject;
  var CanClose: Boolean);
begin
if TableSQL.State in [dsEdit,dsInsert] then
  TableSQL.Post;
end;

procedure TH_FlightAirItemFRM.FormCreate(Sender: TObject);
begin
  cn:=MainFormFRM.CabOutData;
end;

procedure TH_FlightAirItemFRM.Nav1InsertClick(Sender: TObject);
begin
  FirstFLD.SetFocus;
end;

procedure TH_FlightAirItemFRM.CanelBTNClick(Sender: TObject);
begin
TableSQL.Cancel;
close;
end;

End.
