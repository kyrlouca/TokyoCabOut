unit MainForm;

interface


uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,
  StdCtrls, Menus, wwSpeedButton, wwDBNavigator, ExtCtrls,
  wwclearpanel, Grids, Wwdbigrd, Wwdbgrid, Buttons,
 IBC, DBAccess, Db,
  DASQLMonitor, IBCSQLMonitor, MemDS;

  
type
   MyFieldType= (mfDate,mfFloat,mfString,mfInteger,mfDouble);
  TMainFormFRM = class(TForm)
    MainMenu1: TMainMenu;
    About: TMenuItem;
    ProductInfo1: TMenuItem;
    XMLFiles1: TMenuItem;
    Deconsolidation1: TMenuItem;
    Panel1: TPanel;
    Panel3: TPanel;
    BitBtn2: TBitBtn;
    Panel2: TPanel;
    fcShapeBtn2: TButton;
    fcShapeBtn1: TButton;
    EditAirwaybill1: TMenuItem;
    ScanBTN: TButton;
    ListFlights1: TMenuItem;
    Files1: TMenuItem;
    ScanAirwaybills1: TMenuItem;
    System1: TMenuItem;
    Parameters1: TMenuItem;
    CabOutData: TIBCConnection;
    UsedForReadOnlyTrans: TIBCTransaction;
    Tables1: TMenuItem;
    Country1: TMenuItem;
    Itinerary1: TMenuItem;
    ListhBTN: TButton;
    Flights1: TMenuItem;
    Button1: TButton;
    Button2: TButton;
    Customer1: TMenuItem;
    District1: TMenuItem;
    Tariff1: TMenuItem;
    PendingBTN: TButton;
    ReadCSVFile1: TMenuItem;
    Incoterms1: TMenuItem;
    ServiceCodes1: TMenuItem;
    Currency1: TMenuItem;
    IBCSQLMonitor1: TIBCSQLMonitor;
    AdditionalParameters1: TMenuItem;
    ReadAllFIles: TMenuItem;
    procedure ProductInfo1Click(Sender: TObject);
    procedure BitBtn2Click(Sender: TObject);
    procedure fcShapeBtn2Click(Sender: TObject);
    procedure XMLBTNClick(Sender: TObject);
    procedure fcShapeBtn1Click(Sender: TObject);
    procedure ScanBTNClick(Sender: TObject);
    procedure House1Click(Sender: TObject);
    procedure Parameters1Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure Country1Click(Sender: TObject);
    procedure Itinerary1Click(Sender: TObject);
    procedure ListFlights1Click(Sender: TObject);
    procedure ListhBTNClick(Sender: TObject);
    procedure Flights1Click(Sender: TObject);
    procedure Deconsolidation1Click(Sender: TObject);
    procedure EditAirwaybill1Click(Sender: TObject);
    procedure ScanAirwaybills1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Customer1Click(Sender: TObject);
    procedure District1Click(Sender: TObject);
    procedure Tariff1Click(Sender: TObject);
    procedure PendingBTNClick(Sender: TObject);
    procedure ReadCSVFile1Click(Sender: TObject);
    procedure ReadTextClick(Sender: TObject);
    procedure Incoterms1Click(Sender: TObject);
    procedure ServiceCodes1Click(Sender: TObject);
    procedure Currency1Click(Sender: TObject);
    procedure AdditionalParameters1Click(Sender: TObject);
    procedure ReadAllFIlesClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
    Function OpenFile(Var InFile:TextFile):Boolean;
    procedure ConnectToDatabase;
  end;



var
  MainFormFRM: TMainFormFRM;

implementation

uses  P_Deconsolidation,
  H_flightOut, L_FlightOutList, H_scanAirwaybill, M_parameters, M_country,
  L_itinerary, L_Mawbs, M_FlightTable, H_Airwaybill2,
  S_SelectCustomerx, S_SelectTariffY, M_District, L_AIrwaybillHigh,
   H_ScanAirwaybillNew, M_incoterms, M_serviceCode, M_Currency,
  l_FlightAirwaybillParameters,  M_additionalParameters;

{$R *.DFM}





Function TMainFormFRM.OpenFile(Var InFile:TextFile):Boolean;
Var
        AppDirectory:String;
        ParamFIleName:String;
        TheFileName:String;
Begin

AppDirectory:= ExtractFilePath(Application.ExeName);
ParamFileName:=APpDirectory+'DatabaseParams.txt';

Result:=False;

if 2= 2 then begin
    TheFileName:= ParamFileName;
    AssignFile(InFile,TheFileName);
    {$I-}
    Reset(InFile);
    {$I+}
    if IOResult <> 0 then begin
        Result:=false;
        raise exception.create('Cannot Open Database Parameter file:'+ThefileName);
    end else begin
        Result:=True;
    end;
end;

end;





procedure TMainFormFRM.ProductInfo1Click(Sender: TObject);
begin
   ShowMessage('CabOut By LSimple. Version 2.0, Nov 17, 2014');
end;

procedure TMainFormFRM.BitBtn2Click(Sender: TObject);
begin
close;
end;

procedure TMainFormFRM.fcShapeBtn2Click(Sender: TObject);
begin
L_MawbsFRM.ShowMOdal;
end;

procedure TMainFormFRM.XMLBTNClick(Sender: TObject);
begin
// P_DeconsolidationFRM.ShowModal;
//         CreateOneXMLFile.CreateOneXMLFileFRM.CreateDeconsolidationDom('12');

end;

procedure TMainFormFRM.fcShapeBtn1Click(Sender: TObject);
begin


//ReadFileFRM.SHowModal;


end;

procedure TMainFormFRM.ScanBTNClick(Sender: TObject);
begin
H_ScanAirwaibillNewFRM.ShowModal;

end;

procedure TMainFormFRM.House1Click(Sender: TObject);
begin
H_ScanAirwaybillFRM.ShowModal;
end;

procedure TMainFormFRM.Parameters1Click(Sender: TObject);
begin
M_parametersFRM.ShowModal;
end;

procedure TMainFormFRM.ConnectToDatabase;
Var
        InFile:TextFile;
        LIne:String;
        ServerIP,DatabasePath:String;
        TextArray : Array [1..3] of String;
        I:Integer;
begin

        If not OpenFile(InFile) then begin
                raise exception.create('Cannot open file');
        end;
        I:=0;
        while (not Eof(Infile) and (I<2) )do begin
                Inc(i);
                Readln(InFile,TextArray[i]);
        end;
        If (I<2) then begin
                ShowMEssage('File must have two lines. First line for server ip, second line for Full database file');
        end else begin
                ServerIP:=TextArray[1];
                DatabasePath:=TextArray[2];
        end;
        CloseFile(Infile);

        CabOutData.Server:=ServerIP;
        CabOUtData.database:=DatabasePath;
       If CabOutData.connected then
                CabOutData.Disconnect;
                
        CabOutData.Connect;
End;

procedure TMainFormFRM.FormCreate(Sender: TObject);
begin
ConnectToDatabase;
end;

procedure TMainFormFRM.Button1Click(Sender: TObject);
begin
//L_AirwaybillsHighFRM.ShowModal;
//ReadFileFRM.Showmodal;
end;

procedure TMainFormFRM.Country1Click(Sender: TObject);
begin
M_countryFRM.ShowModal;
end;

procedure TMainFormFRM.Itinerary1Click(Sender: TObject);
begin
L_ItineraryFRM.ShowModal;
end;

procedure TMainFormFRM.ListFlights1Click(Sender: TObject);
begin
L_flightOUtListFRM.SHowMOdal;
end;

procedure TMainFormFRM.ListhBTNClick(Sender: TObject);
begin
L_flightOUtListFRM.SHowMOdal;

end;

procedure TMainFormFRM.Flights1Click(Sender: TObject);
begin
M_flightTableFRM.SHowModal;
end;

procedure TMainFormFRM.Deconsolidation1Click(Sender: TObject);
begin
//I_readManifestFIleFRM.ShowModal;
//ReadFileFRM.SHowModal;

end;

procedure TMainFormFRM.EditAirwaybill1Click(Sender: TObject);
begin
//L_MawbsFRM.ShowMOdal;

end;

procedure TMainFormFRM.ScanAirwaybills1Click(Sender: TObject);
begin
H_scanAirwaybillFRM.ShowModal;

end;

procedure TMainFormFRM.Button2Click(Sender: TObject);
begin
L_AirwaybillsHighFRM.SHowModal;
end;

procedure TMainFormFRM.Customer1Click(Sender: TObject);
begin
S_selectCustomerXFRM.SHowMOdal;
end;

procedure TMainFormFRM.District1Click(Sender: TObject);
begin
M_DistrictFRM.SHowMOdal;
end;

procedure TMainFormFRM.Tariff1Click(Sender: TObject);
begin
S_SelectTariffyFRM.SHowMOdal;
end;

procedure TMainFormFRM.PendingBTNClick(Sender: TObject);
begin
L_AirwaybillsHighFRM.SHowModal;

end;

procedure TMainFormFRM.ReadCSVFile1Click(Sender: TObject);
begin
//I_readManifestFIleFRM.ShowModal;

end;

procedure TMainFormFRM.ReadTextClick(Sender: TObject);
begin
//I_readManifestFIleFRM.ShowModal;

end;

procedure TMainFormFRM.Incoterms1Click(Sender: TObject);
begin
M_IncotermsFRm.ShowModal;
end;

procedure TMainFormFRM.ServiceCodes1Click(Sender: TObject);
begin
M_ServiceCodesFRM.ShowModal;
end;

procedure TMainFormFRM.Currency1Click(Sender: TObject);
begin
M_CurrencyFRM.SHowMOdal;
end;

procedure TMainFormFRM.AdditionalParameters1Click(Sender: TObject);
begin
 M_additionalParametersFRM.ShowModal;
end;

procedure TMainFormFRM.ReadAllFIlesClick(Sender: TObject);
begin
//R_ReadAllFilesFRM.ShowModal;
end;

end.
